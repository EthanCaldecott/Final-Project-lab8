#Ethan Caldecott
#Final Project

#Project Rosalind : A Rapid Introduction to Molecular Biology
"""
A string is simply an ordered collection of symbols selected from some alphabet and formed into a word; the length of a string is the number of symbols that it contains.

An example of a length 21 DNA string (whose alphabet contains the symbols 'A', 'C', 'G', and 'T') is "ATGCTTCAGAAAGGTCTTACG."

Given: A DNA string s of length at most 1000 nt.

Return: Four integers (separated by spaces) counting the respective number of times that the symbols 'A', 'C', 'G', and 'T' occur in s.
"""


def MolecularBio(s):
    A=0                   #Base A counter starts at 0
    C=0                   #C Counter starts at 0
    G=0                   #G counter starts at 0
    T=0                   #T counter starts at 0
    for i in s:           #Add 1 to A counter every time a A is detected in the string
        if i == 'A':
            A = A + 1
    for i in s:           #Add 1 to C counter every time a C is detected in the string
        if i == 'C':
            C = C + 1
    for i in s:           #Add 1 to G counter every time a G is detected in the string
        if i == 'G':
            G = G + 1       
    for i in s:           #Add 1 to T counter every time a T is detected in the string              
        if i == 'T':
            T = T + 1
    print("Number of A's: " + str(A))  #Prints the total amount of A's
    print("Number of C's: " + str(C))  #Prints the total amount of C's
    print("Number of G's: " + str(G))  #Prints the total amount of G's
    print("Number of T's: " + str(T))  #Prints the total amount of T's

if __name__ == '__main__':
    MolecularBio('ACGT')                                                                   #Should return 1A, 1C, 1G, and 1T
    MolecularBio('AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC') #Should return 20A's, 12C's, 17G's, 21T's.

    
    
#Project Euler Question 12 (Sudo Code)
"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""


def Divisor(z):             #takes in a number z
    if z == 0:              #if z is 0 return 0 as 0 has 0 divisors
        return 0
    else:                   #Otherwise takes in z using the equation which equals r which is the number of divisors
        for i in range(z):
            r = len([i for i in range(1,z+1) if not z % i])
        return int(r)       #return number of divisors as interger

def Triangle(a):
    if a == 0:                      #the 0th triangle number is 0
        return 0
    if a == 1:                      #the 1st triangle number is 1
        return 1
    else:                           #Using the equation for a triangle number returns the integer value of any trianlge number in the triangle number sequence
        return int((a*(a+1))/2)

def answer(x):                         #Use both the traingle and divisor funciton to find the traingle number that fits the divisor you input as x
    n = 0
    while x != (Divisor(Triangle(n))): #test each triangle number and if they do not contain the right amount of divisor keep testing
        n = n+1                        #test the next triangle number least to greatest
    else:
        return Triangle(n)             #Returns the smallest triangle number with x amount of divisors

if __name__ == '__main__':
    answer(1)   #Answer 1
    answer(2)   #Answer 3
    answer(4)   #Answer 6
    answer(500) #Answer 76,576,500
